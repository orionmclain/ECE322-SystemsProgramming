/* Orion McLain 32446862
 *
 * tsh - A tiny shell program with job control
 * 
 */
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <ctype.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <errno.h>
#include <fcntl.h>

/* Misc manifest constants */
#define MAXLINE    1024   /* max line size */
#define MAXARGS     128   /* max args on a command line */
#define MAXJOBS      16   /* max jobs at any point in time */
#define MAXJID    1<<16   /* max job ID */

/* Job states */
#define UNDEF 0 /* undefined */
#define FG 1    /* running in foreground */
#define BG 2    /* running in background */
#define ST 3    /* stopped */

/* 
 * Jobs states: FG (foreground), BG (background), ST (stopped)
 * Job state transitions and enabling actions:
 *     FG -> ST  : ctrl-z
 *     ST -> FG  : fg command
 *     ST -> BG  : bg command
 *     BG -> FG  : fg command
 * At most 1 job can be in the FG state.
 */

/* Global variables */
extern char **environ;      /* defined in libc */
char prompt[] = "tsh> ";    /* command line prompt (DO NOT CHANGE) */
int verbose = 0;            /* if true, print additional output */
int nextjid = 1;            /* next job ID to allocate */
char sbuf[MAXLINE];         /* for composing sprintf messages */

struct job_t {              /* The job struct */
    pid_t pid;              /* job PID */
    int jid;                /* job ID [1, 2, ...] */
    int state;              /* UNDEF, BG, FG, or ST */
    char cmdline[MAXLINE];  /* command line */
};
struct job_t jobs[MAXJOBS]; /* The job list */
/* End global variables */


/* Function prototypes */

/* Here are the functions that you will implement */
void eval(char *cmdline);
int builtin_cmd(char **argv);
void do_bgfg(char **argv);
void waitfg(pid_t pid);

void sigchld_handler(int sig);
void sigtstp_handler(int sig);
void sigint_handler(int sig);

/* Here are helper routines that we've provided for you */
int parseline(const char *cmdline, char **argv); 
void sigquit_handler(int sig);

void clearjob(struct job_t *job);
void initjobs(struct job_t *jobs);
int maxjid(struct job_t *jobs); 
int addjob(struct job_t *jobs, pid_t pid, int state, char *cmdline);
int deletejob(struct job_t *jobs, pid_t pid); 
pid_t fgpid(struct job_t *jobs);
struct job_t *getjobpid(struct job_t *jobs, pid_t pid);
struct job_t *getjobjid(struct job_t *jobs, int jid); 
int pid2jid(pid_t pid); 
void listjobs(struct job_t *jobs);

void usage(void);
void unix_error(char *msg);
void app_error(char *msg);
typedef void handler_t(int);
handler_t *Signal(int signum, handler_t *handler);

/*
 * main - The shell's main routine 
 */
int main(int argc, char **argv) 
{
    char c;
    char cmdline[MAXLINE];
    int emit_prompt = 1; /* emit prompt (default) */

    /* Redirect stderr to stdout (so that driver will get all output
     * on the pipe connected to stdout) */
    dup2(1, 2);

    /* Parse the command line */
    while ((c = getopt(argc, argv, "hvp")) != EOF) {
        switch (c) {
        case 'h':             /* print help message */
            usage();
	    break;
        case 'v':             /* emit additional diagnostic info */
            verbose = 1;
	    break;
        case 'p':             /* don't print a prompt */
            emit_prompt = 0;  /* handy for automatic testing */
	    break;
	default:
            usage();
	}
    }

    /* Install the signal handlers */

    /* These are the ones you will need to implement */
    Signal(SIGINT,  sigint_handler);   /* ctrl-c */
    Signal(SIGTSTP, sigtstp_handler);  /* ctrl-z */
    Signal(SIGCHLD, sigchld_handler);  /* Terminated or stopped child */

    /* This one provides a clean way to kill the shell */
    Signal(SIGQUIT, sigquit_handler); 

    /* Initialize the job list */
    initjobs(jobs);

    /* Execute the shell's read/eval loop */
    while (1) {

	/* Read command line */
	if (emit_prompt) {
	    printf("%s", prompt);
	    fflush(stdout);
	}
	if ((fgets(cmdline, MAXLINE, stdin) == NULL) && ferror(stdin))
	    app_error("fgets error");
	if (feof(stdin)) { /* End of file (ctrl-d) */
	    fflush(stdout);
	    exit(0);
	}

	/* Evaluate the command line */
	eval(cmdline);
	fflush(stdout);
	fflush(stdout);
    } 

    exit(0); /* control never reaches here */
}
  
/* 
 * eval - Evaluate the command line that the user has just typed in
 * 
 * If the user has requested a built-in command (quit, jobs, bg or fg), execute it immediately. 
 
 * Otherwise, fork a child process and run the job in the context of the child. 
 * If the job is running in the foreground, wait for it to terminate and then return. 

 * Note: each child process must have a unique process group ID so that our
 * background children don't receive SIGINT (SIGTSTP) from the kernel
 * when we type ctrl-c (ctrl-z) at the keyboard.

NOTES FROM CLASS/OTHER:
    uses parseline(const char *cmdline, char ** argv);
    needs addjob(struct job_t *jobs, pid_t pid, int state, char *cmdline);

    1. Parse the command line
    2. If a builtin command, then execute it usings builtin_cmd()
    3. If not a builtin command, then fork child, addjob in parent
        - handle both foreground and background case
	- Lecture 18/19 slides and signals example code eval as starter code

Approx. 70 lines
*/
void eval(char *cmdline)                           // FUNCTION TO IMPLEMENT -----------------
{
  // **** code from class/book ****
  char *argv[MAXARGS];   // Argument list execve()
  char buf[MAXLINE];     /* Holds modified command line */
  int bg;                /* Should the job run in bg or fg? */
  pid_t pid;             /* Process id */
  int i = 0;             // to interate through argv
  
  strcpy(buf, cmdline);    // copies cmdline input into buf array 
  bg = parseline(buf, argv);     //  set bg to true if should run in background, false if foreground, done by calling parseline 
  if (argv[0] == NULL) {
    return;   /* Ignore empty lines */
  }

  // ------ check if user input does not call a builtin command or isn't an executable program ------ 
  
  if (builtin_cmd(argv) == 0) {      // call builtin_cmd() to execute input if builtin, if not builtin, check first word for executable program  
  }
    if ((pid = fork()) == 0) {   // child checks for executable and returns statement if not
      setpgid(0,0);   // put child in new process group with identical process ID
    
      // ------ scan command line for redirection / pipes  -------
      for(i = 0; argv[i] != '\0'; i++){      // iterate through argv
	// --- check for stdin redirection
	printf("argv%i: %s\n", i, argv[i]);    // commandline checker

	if (strcmp(argv[i], "<") == 0) {
	  /*for(int j=0; j<MAXARGS; j++){
	    printf("argv%i: %s\n", j, argv[j]);    // commandline checker
	    }*/
	  // -- open file -> adjust file directors -> close file --  
	  int newstdin = open(argv[i+1], O_RDONLY | O_CREAT, S_IRWXU | S_IRWXG | S_IRWXO);
	  dup2(newstdin, 0);   // duplicate the file into the stdin file descriptor 0
	  close(newstdin);     // close the opened file, to not have it running twice

	  // check for stdout redir
	  if (strcmp(argv[i+2], ">") == 0) {
	    /*for(int j=0; j<MAXARGS; j++){                                         
            printf("argv%i: %s\n", j, argv[j]);    // commandline checker         
            }*/
	    // -- open file -> adjust file directors -> close file --
	    // printf("argv%i: %s\n", i+1, argv[i+1]);
	    printf("--------------------- \n");
	    
	    int instdout = open(argv[i+3], O_WRONLY | O_CREAT | O_TRUNC, S_IRWXU | S_IRWXG | S_IRWXO);
	    dup2(instdout, STDOUT_FILENO);    // duplicate the file into the stdout file descriptor 1
	    close(instdout);      // close the opened file, to not have it running twice

	    // -- adjust command line --
	    argv[i+2] = NULL;

	    break;
	  }
	  
	  // -- adjust command line --
	  argv[i] = NULL;
	  /*int j = i;
	    while(j != MAXARGS - 2){   // remove "<" and file from command line
	    argv[j] = argv[j+2];    // adjust each following item 2 positions to make sure no empty space
	    j++;
	    } */  
	  break; 
	}
	
	// --- check for stdout redirection
	if (strcmp(argv[i], ">") == 0) {
	  /*for(int j=0; j<MAXARGS; j++){
	    printf("argv%i: %s\n", j, argv[j]);    // commandline checker  
	    }*/
	// -- open file -> adjust file directors -> close file --
	  // printf("argv%i: %s\n", i+1, argv[i+1]); 
	  int newstdout = open(argv[i+1], O_WRONLY | O_CREAT | O_TRUNC, S_IRWXU | S_IRWXG | S_IRWXO);
	  dup2(newstdout, STDOUT_FILENO);    // duplicate the file into the stdout file descriptor 1
	  close(newstdout);      // close the opened file, to not have it running twice

	  // -- adjust command line --
	  argv[i] = NULL;
	  
	  /*int k = i;
	  while(k != MAXARGS - 2){   // remove ">" and file from command line
	    argv[k] = argv[k+2];    // adjust each following item 2 positions to make sure no empty space
	    k++;
	    }*/
	  break;
	}

	// ---  check for stderr redirection
	if (strcmp(argv[i], "2>") == 0) {

	  // -- open file -> adjust file directors -> close file --  
	  int newstderr = open(argv[i+1], O_WRONLY | O_CREAT | O_TRUNC, S_IRWXU | S_IRWXG | S_IRWXO);
	  dup2(newstderr, 2);    // duplicate the file into the stderr file descriptor 2
	  close(newstderr);      // close the opened file, to not have it running twice

	  // -- adjust command line --
	  argv[i] = NULL;
	  /*int l = i;
	  while(l != MAXARGS - 2){   // remove "2>" and file from command line
	    argv[l] = argv[l+2];    // adjust each following item 2 positions to make sure no empty space
	    l++;
	    }*/
	  break; 
	}
	// --- check for stdout append redirection
	if (strcmp(argv[i], ">>") == 0) {

	  // -- open file -> adjust file directors -> close file -- 
	  int newappout = open(argv[i+1], O_WRONLY | O_CREAT | O_APPEND, S_IRWXU | S_IRWXG | S_IRWXO);
	  dup2(newappout, 1);    // duplicate the file into the stdout file descriptor 1
	  close(newappout);      // close the opened file, to not have it running twice

	  // -- adjust command line -- 
	  argv[i] = NULL;
	  /*int m = i;
	  while(m != MAXARGS - 2){   // remove ">" and file from command line
	    argv[m] = argv[m+2];    // adjust each following item 2 positions to make sure no empty space
	    m++;
	    }*/
	}
        /*   
	// --- check for pipe in command line                               
	if (strcmp(argv[i], "|") == 0) {                     
	  int p = i;      // index to mark where the pipe is in argv             
	  int fd[2];                              
	  if (pipe(fd) == -1) {    // initialize the pipe, fd[0] is read end, fd[1] is write end, 0 success, -1 error              
	    return 1; // pipe error check                      
	  }
	  // -- build read pipe --
	  char readPipe[p];
	  for(int n = 0; n < p; n++) {    // build left part of pipe in argv
	    readPipe += argv[n];
	  }
	  // -- build write pipe  --
	  char writePipe[MAXARGS - p];
	  for(int o = p; o < MAXARGS; o++;){
	    writePipe += argv[o];
	  }
	  dup2(
	} 
	*/
      }

      if(execve(argv[0], argv, environ) < 0) {  // if first word of user input is not an executable program, executes argv[0] if not <0

	printf("%s: Command not found.\n", argv[0]); // tell user command was not an executable program 
	exit(1);  // exit failure
      }
    }
    // ------ now we know we have an input that is executable, need to add to either foreground or background ------      

    else{
      if (bg == 0) {   // bg = 0 --> want to run command in the foreground

	addjob(jobs, pid, FG, cmdline);  /* add foreground job */
	waitfg(pid);  // wait for foreground process to stop if one is running

      }
      
      else {      // bg == 1 --> want to run command in the background
	
	addjob(jobs, pid, BG, cmdline);  // add background job
	printf("[%d] (%d) %s", pid2jid(pid), pid, cmdline);    // print info for the backgrounding process: jid, pid, command name(input)
	
      }
    }
  return;
}

/* 
 * parseline - Parse the command line and build the argv array.
 * 
 * Characters enclosed in single quotes are treated as a single
 * argument.  Return true if the user has requested a BG job, false if
 * the user has requested a FG job.  
 */
int parseline(const char *cmdline, char **argv) 
{
    static char array[MAXLINE]; /* holds local copy of command line */
    char *buf = array;          /* ptr that traverses command line */
    char *delim;                /* points to first space delimiter */
    int argc;                   /* number of args */
    int bg;                     /* background job? */

    strcpy(buf, cmdline);
    buf[strlen(buf)-1] = ' ';  /* replace trailing '\n' with space */
    while (*buf && (*buf == ' ')) /* ignore leading spaces */
	buf++;

    /* Build the argv list */
    argc = 0;
    if (*buf == '\'') {
	buf++;
	delim = strchr(buf, '\'');
    }
    else {
	delim = strchr(buf, ' ');
    }

    while (delim) {
	argv[argc++] = buf;
	*delim = '\0';
	buf = delim + 1;
	while (*buf && (*buf == ' ')) /* ignore spaces */
	       buf++;

	if (*buf == '\'') {
	    buf++;
	    delim = strchr(buf, '\'');
	}
	else {
	    delim = strchr(buf, ' ');
	}
    }
    argv[argc] = NULL;
    
    if (argc == 0)  /* ignore blank line */
	return 1;

    /* should the job run in the background? */
    if ((bg = (*argv[argc-1] == '&')) != 0) {
	argv[--argc] = NULL;
    }
    return bg;
}

/* 
 * builtin_cmd - If the user has typed a built-in command then executeit immediately.  

NOTES FROM CLASS/OTHER: 
4 commands: quit, fg, bg, or jobs
    1. The quit command terminates the shell.
    2. The jobs command lists all background jobs.
    3. The bg <job> command restarts <job> by sending it a SIGCONT signal, and then runs it in the background. The <job> argument can either be a PID or a JID.
    4. The fg <job> command restarts <job> by sending it a SIGCONT signal, and then runs it in the foreground.  The <job> argument can be either a PID or a JID.
 listjobs()

Approx 25 lines
current line count: 13? 
 */
int builtin_cmd(char **argv)                    //  FUNCTION TO IMPLEMENT  ----------------- 
{
  if (strcmp(argv[0], "quit") == 0){    // if user inputs "quit" then exit   

    exit(0);  // terminate the shell

  }

  else if(strcmp(argv[0], "bg") == 0 || strcmp(argv[0], "fg") == 0){   // if user inputs either "bg" or "fg" then call do_bgfg to handle foregrounding/backgrounding

    do_bgfg(argv);   // call do_bgfg with argument input
    return 1;

  }

  else if(strcmp(argv[0], "jobs") == 0){   // if user input "jobs" complete jobs command 

    listjobs(jobs);   // list jobs, function already implemented 
    return 1;  // return 1 to indicate builtin command

  }

  else {    // else if input does not match builtin commands

    return 0;     // return 0 to indicate input not a builtin command

  }

}

/* 
 * do_bgfg - Execute the builtin bg and fg commands

NOTES FROM CLASS/OTHER: 
Handle error cases
Change job state and send SIGCONT to PID
    use kill funcgion
    if foreground, will need to wait on job

Approx. 50 lines
 */
void do_bgfg(char **argv)                        //  FUNCTION TO IMPLEMENT  -----------------
{
  struct job_t* job1;  // initialize job1 as variable of type job_t* 
  int jid;  // initialize jobID 
  char* id = argv[1]; // argv[1] holds either jobs PID or JID, following argv[0] command 

  if (id == NULL){  // if user did not enter job/process id

    printf("%s command requires PID or %%jobid argument\n", argv[0]);  // print error statement
      return;

    }
  // ------  check if job specified 'looks like' a PID ie. first digit is a number ------
  
  if (isdigit(id[0])) {  // if first bit of id is a number, then id is a PID

    pid_t pid1 = atoi(id); // convert id string to int and store in pid1 

    if ((job1 = getjobpid(jobs,pid1)) == 0) {  // if PID entered doesn't match a job

      printf("(%d): no such process\n", pid1); // print error statement if process not found
      return; 

    }

  }
  
  // ------ check if job specified is a JID, ie. first char is '%' ------ 
  
  else if (id[0] == '%') { // if the first bit of id is "%", then id is a JID 

    jid = atoi(&id[1]);  // convert id to an int
    
    if ((job1 = getjobjid(jobs,jid)) == 0) {  // if jid entered does not match a job
      
      printf("%%%d: no such job\n", jid);  // print error if job not found
      return;

    }
    
  }

   
  else {  // if argument was neither a JID nor a PID 
    
    printf("%s: argument must be a PID or %%jobid\n", argv[0]);  // print error statement
    return;
    
  }

  // ------ now we know job specified is an executable program ------ 
  
  if (kill(-(job1->pid), SIGCONT) < 0) {  // start job, check if a process matches PID 
    
    if (errno != ESRCH) {   // if the error is not a no-such-process error, check for unexpected error
      
      printf("kill error!\n");   // print kill error message
      
    }
    
  }

  // ------ handle job in either foreground or background ------ 
  
  if (strcmp(argv[0], "bg") == 0) {  //  if executing job in background 
    
    job1->state = BG;  // set job's state to background 
    printf("[%d] (%d) %s", job1->jid, job1->pid, job1->cmdline);  // print background job's info 
    
  }
  
  else if (strcmp("fg", argv[0]) == 0) {  // if executing job in foreground 
    
    job1->state = FG;    // set job's state to foreground 
    waitfg(job1->pid);    // call waitfg on the current job 
    
  }
  
  else {  // neither foreground nor background 
    
    printf("bg/fg error: %s\n", argv[0]);  // print out error message 
    
  }

  return;
}

/* 
 * waitfg - Block until process pid is no longer the foreground process
 
NOTES FROM CLASS/OTHER: 
    wait for foreground job to finish
    can just use a busy loop around the sleep() function
        ie. the case that was "too slow" in the lecture slides

Approx. 20 lines
 */
void waitfg(pid_t pid)                           //  FUNCTION TO IMPLEMENT  -----------------
{

  while (pid == fgpid(jobs)){  // while processID is the same as Foreground processID 

    sleep(1);  // sleep for 1 second 

  }

  return;
}

/*****************
 * Signal handlers
 *****************/

/* 
 * sigchld_handler - The kernel sends a SIGCHLD to the shell whenever
 *     a child job terminates (becomes a zombie), or stops because it
 *     received a SIGSTOP or SIGTSTP signal. The handler reaps all
 *     available zombie children, but doesn't wait for any other
 *     currently running children to terminate.  

Approx. 80 lines
 */
void sigchld_handler(int sig)                     //  FUNCTION TO IMPLEMENT  ------------------
{
  int status;  // intiialize status variable 
  pid_t pid;  // initialize Process ID variable
    
  while ( ( pid = waitpid( -1, &status, WNOHANG | WUNTRACED ) ) > 0 ) {  // while any child processes haven't been handled  
    if ( WIFSIGNALED(status) ) {  // if child terminated due to receiving a signal that was not caught 

      deletejob(jobs, pid);  // delete jobs 

    }

    else if ( WIFEXITED(status) ) {    // else if child process terminated

      deletejob(jobs, pid);  // delete jobs 

    }

    else if ( WIFSTOPPED(status) ) {       // if child process is currently stopped
      
      getjobpid(jobs, pid)->state = ST;  // update job's status to stopped 
      
    }
    
  }
  
  return;
}

/* 
 * sigint_handler - The kernel sends a SIGINT to the shell whenver the
 *    user types ctrl-c at the keyboard.  Catch it and send it along
 *    to the foreground job.  

Approx. 15 lines
 */
void sigint_handler(int sig)                     //  FUNCTION TO IMPLEMENT  -------------------
{
  int pid = fgpid(jobs);  // inititalize pid as the process ID using fgpid() 
  int jid = pid2jid(pid);  // convert pid to jid

  if (pid != 0) {   // if pid exists 

    kill(-pid, SIGINT);  // send kill signal 
    printf("Job [%d] (%d) terminated by signal %d\n", jid, pid, sig);  // send signal termination message
    deletejob(jobs, pid);  // delete job 

    }

    return;
}

/*
 * sigtstp_handler - The kernel sends a SIGTSTP to the shell whenever
 *     the user types ctrl-z at the keyboard. Catch it and suspend the
 *     foreground job by sending it a SIGTSTP.


Approx. 15 lines  
 */
void sigtstp_handler(int sig)                    //  FUNCTION TO IMPLEMENT  -------------------
{
  int pid = fgpid(jobs);  // initialize pid as the process ID using fgpid() 
  int jid = pid2jid(pid);  // inititalize jid as the job id 

  if (pid != 0) {   // if pid exists

    getjobpid(jobs, pid)->state = ST;  // update job's pid to ST for stopped
    printf("Job [%d] (%d) stopped by signal %d\n", jid, pid, sig);  // print job stopping message
    kill(-pid, SIGTSTP);  // end jobs 
    
  }
  
  return;
}

/*********************
 * End signal handlers
 *********************/

/***********************************************
 * Helper routines that manipulate the job list
 **********************************************/

/* clearjob - Clear the entries in a job struct */
void clearjob(struct job_t *job) {
    job->pid = 0;
    job->jid = 0;
    job->state = UNDEF;
    job->cmdline[0] = '\0';
}

/* initjobs - Initialize the job list */
void initjobs(struct job_t *jobs) {
    int i;

    for (i = 0; i < MAXJOBS; i++)
	clearjob(&jobs[i]);
}

/* maxjid - Returns largest allocated job ID */
int maxjid(struct job_t *jobs) 
{
    int i, max=0;

    for (i = 0; i < MAXJOBS; i++)
	if (jobs[i].jid > max)
	    max = jobs[i].jid;
    return max;
}

/* addjob - Add a job to the job list */
int addjob(struct job_t *jobs, pid_t pid, int state, char *cmdline) 
{
    int i;
    
    if (pid < 1)
	return 0;

    for (i = 0; i < MAXJOBS; i++) {
	if (jobs[i].pid == 0) {
	    jobs[i].pid = pid;
	    jobs[i].state = state;
	    jobs[i].jid = nextjid++;
	    if (nextjid > MAXJOBS)
		nextjid = 1;
	    strcpy(jobs[i].cmdline, cmdline);
  	    if(verbose){
	        printf("Added job [%d] %d %s\n", jobs[i].jid, jobs[i].pid, jobs[i].cmdline);
            }
            return 1;
	}
    }
    printf("Tried to create too many jobs\n");
    return 0;
}

/* deletejob - Delete a job whose PID=pid from the job list */
int deletejob(struct job_t *jobs, pid_t pid) 
{
    int i;

    if (pid < 1)
	return 0;

    for (i = 0; i < MAXJOBS; i++) {
	if (jobs[i].pid == pid) {
	    clearjob(&jobs[i]);
	    nextjid = maxjid(jobs)+1;
	    return 1;
	}
    }
    return 0;
}

/* fgpid - Return PID of current foreground job, 0 if no such job */
pid_t fgpid(struct job_t *jobs) {
    int i;

    for (i = 0; i < MAXJOBS; i++)
	if (jobs[i].state == FG)
	    return jobs[i].pid;
    return 0;
}

/* getjobpid  - Find a job (by PID) on the job list */
struct job_t *getjobpid(struct job_t *jobs, pid_t pid) {
    int i;

    if (pid < 1)
	return NULL;
    for (i = 0; i < MAXJOBS; i++)
	if (jobs[i].pid == pid)
	    return &jobs[i];
    return NULL;
}

/* getjobjid  - Find a job (by JID) on the job list */
struct job_t *getjobjid(struct job_t *jobs, int jid) 
{
    int i;

    if (jid < 1)
	return NULL;
    for (i = 0; i < MAXJOBS; i++)
	if (jobs[i].jid == jid)
	    return &jobs[i];
    return NULL;
}

/* pid2jid - Map process ID to job ID */
int pid2jid(pid_t pid) 
{
    int i;

    if (pid < 1)
	return 0;
    for (i = 0; i < MAXJOBS; i++)
	if (jobs[i].pid == pid) {
            return jobs[i].jid;
        }
    return 0;
}

/* listjobs - Print the job list */
void listjobs(struct job_t *jobs) 
{
    int i;
    
    for (i = 0; i < MAXJOBS; i++) {
	if (jobs[i].pid != 0) {
	    printf("[%d] (%d) ", jobs[i].jid, jobs[i].pid);
	    switch (jobs[i].state) {
		case BG: 
		    printf("Running ");
		    break;
		case FG: 
		    printf("Foreground ");
		    break;
		case ST: 
		    printf("Stopped ");
		    break;
	    default:
		    printf("listjobs: Internal error: job[%d].state=%d ", 
			   i, jobs[i].state);
	    }
	    printf("%s", jobs[i].cmdline);
	}
    }
}
/******************************
 * end job list helper routines
 ******************************/


/***********************
 * Other helper routines
 ***********************/

/*
 * usage - print a help message
 */
void usage(void) 
{
    printf("Usage: shell [-hvp]\n");
    printf("   -h   print this message\n");
    printf("   -v   print additional diagnostic information\n");
    printf("   -p   do not emit a command prompt\n");
    exit(1);
}

/*
 * unix_error - unix-style error routine
 */
void unix_error(char *msg)
{
    fprintf(stdout, "%s: %s\n", msg, strerror(errno));
    exit(1);
}

/*
 * app_error - application-style error routine
 */
void app_error(char *msg)
{
    fprintf(stdout, "%s\n", msg);
    exit(1);
}

/*
 * Signal - wrapper for the sigaction function
 */
handler_t *Signal(int signum, handler_t *handler) 
{
    struct sigaction action, old_action;

    action.sa_handler = handler;  
    sigemptyset(&action.sa_mask); /* block sigs of type being handled */
    action.sa_flags = SA_RESTART; /* restart syscalls if possible */

    if (sigaction(signum, &action, &old_action) < 0)
	unix_error("Signal error");
    return (old_action.sa_handler);
}

/*
 * sigquit_handler - The driver program can gracefully terminate the
 *    child shell by sending it a SIGQUIT signal.
 */
void sigquit_handler(int sig) 
{
    printf("Terminating after receipt of SIGQUIT signal\n");
    exit(1);
}



